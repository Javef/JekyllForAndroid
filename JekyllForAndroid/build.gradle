apply plugin: 'android'
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.7.+'
    }
}
repositories {
    mavenCentral()
}
android {
    compileSdkVersion 19
    buildToolsVersion "19"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')

    }

    defaultConfig {
        minSdkVersion 12
        targetSdkVersion 18
        versionCode versionCodeFromFile()
        versionName versionFromFile()
    }

    signingConfigs {
        def console = System.console()
        def pass = ""
        if (console != null) {
            pass = console.readLine('> Enter keystore password: ')
        }

        release {
            storeFile file("/Users/tsagi/Development/AndroidStudioProjects/KeyStore/jekyllforandroid.keystore")
            storePassword pass
            keyAlias "cbm instrument"
            keyPassword pass
        }

        nightly {
            storeFile file("../jekyllforandroid.keystore")
            storePassword pass
            keyAlias "cbm instrument nightly"
            keyPassword pass
        }
    }

    buildTypes {

        release {
            signingConfig signingConfigs.release
        }

        beta.initWith(buildTypes.release)
        beta {
            versionNameSuffix "-beta"
        }

        nightly.initWith(buildTypes.release)
        nightly {
            packageNameSuffix ".nightly"
            versionNameSuffix "-nightly"
            signingConfig signingConfigs.nightly
            debuggable true
        }

        debug {
            packageNameSuffix ".dev"
            versionNameSuffix "-dev"
        }
    }

    dependencies {
        compile group: 'org.yaml', name: 'snakeyaml', version: '1.13'
//        compile group: 'in.uncod.android.bypass', name: 'bypass', version: '1.1'
        compile fileTree(dir: 'libs', include: '*.jar')
        compile files("$buildDir/native-libs/native-libs.jar")
    }

    task nativeLibsToJar(type: Zip) {
        destinationDir file("$buildDir/native-libs")
        baseName 'native-libs'
        extension 'jar'
        from fileTree(dir: 'libs', include: '**/*.so')
        into 'lib/'
    }

    tasks.withType(Compile) {
        compileTask -> compileTask.dependsOn(nativeLibsToJar)
    }
}
assembleDebug.doFirst {
    incrementVersionCode()
}
def versionCodeFromFile() {
    def versionCodeFile = file("version_code")
    return Integer.parseInt(versionCodeFile.getText().trim())
}
def versionFromFile() {
    def versionFile = file("version")
    return versionFile.getText().trim()
}
def incrementVersionCode() {
    def versionCodeFile = file("version_code")
    def versionCode = Integer.parseInt(versionCodeFile.getText().trim())
    versionCode = versionCode + 1
    versionCodeFile.write(versionCode.toString())
}